{"mappings":"YAOA,MAAMA,EAASC,SAASC,cAAc,QACtC,IAAIC,EAAW,EA2Bf,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAK3BC,YAAW,KAGaC,KAAKC,SAAW,GAGpCJ,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAM,GAE1BA,EAAA,GAEP,CA3CAN,EAAOa,iBAAiB,UAAU,KAEhCC,MAAMC,iBAEN,IAAIT,EAA6B,EAArBN,EAAOM,MAAMU,MACzB,MAAMC,EAA2B,EAApBjB,EAAOiB,KAAKD,MACnBE,EAA+B,EAAtBlB,EAAOkB,OAAOF,MAI7B,KAAOb,EAAWe,GAChBd,EAAcD,EAAUG,GACrBa,MAAK,EAACd,SAAEA,EAAQC,MAAEA,MACjBc,QAAQC,IAAI,uBAAuBhB,QAAeC,MAAS,IAE5DgB,OAAM,EAACjB,SAAEA,EAAQC,MAAEA,MAClBc,QAAQC,IAAI,sBAAsBhB,QAAeC,MAAS,IAG9DH,GAAY,EACZG,GAASW,CACX,G","sources":["src/js/03-promises.js"],"sourcesContent":["// // Т.З.:\n//  - скрипт, який при сабміті форми викликає ф. createPromise(position, delay) стільки разів, скільки ввели в поле Amount.\n//  - (position) номер промісу, що створюється під час кожного виклику\n//  - (delay) затримка (враховуює першу затримку First delay, і крок Delay step ).\n//  createPromise повертає один проміс, який виконується або відхиляється через delay часу.\n//  Значенням промісу є об'єкт, в якому є властивості position і delay зі значеннями однойменних параметрів.\n\nconst elForm = document.querySelector('form');\nlet position = 0;\n// console.log(elForm);\n\nelForm.addEventListener('submit', () => {\n  // виявляєм подію квік\n  event.preventDefault(); // вимикаєм стандартні події\n\n  let delay = elForm.delay.value * 1; // зчитуєм з форми delay мс.\n  const step = elForm.step.value * 1; // зчитуєм з форми step мс.\n  const amount = elForm.amount.value * 1; // зчитуєм з форми step мс.\n\n  // console.log('подія квік', delay, step, amount);\n\n  while (position < amount) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    position += 1;\n    delay += step;\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // створ. проміс\n    // console.log('створ. проміс', position);\n    // console.log('запускаю таймаут на', delay);\n\n    setTimeout(() => {\n      // console.log('минув таймаут');\n\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$elForm","document","querySelector","$ce04d3a99e08e73b$var$position","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","value","step","amount","then","console","log","catch"],"version":3,"file":"03-promises.980c8cee.js.map"}